//go:build ignore
// +build ignore

// This file is necessary to create go file with data phrases.

package main

import (
	"encoding/json"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"text/template"
	"time"
)

// Phrase phrases struct
type Phrase struct {
	Quote  string `json:"quote"`
	Author string `json:"author"`
}

func main() {
	_, currentFile, _, _ := runtime.Caller(0)
	currentDir := filepath.Dir(currentFile)

	fileDataBR, err := os.Create(filepath.Join(currentDir, "data_br.go"))
	die(err)
	defer fileDataBR.Close()

	fileDataUS, err := os.Create(filepath.Join(currentDir, "data_us.go"))
	die(err)
	defer fileDataUS.Close()

	log.Println("Converting BR phrases")
	phrasesBR := ReadPhrasesFromDirectory("data/br")

	log.Println("Converting US phrases")
	phrasesUS := ReadPhrasesFromDirectory("data/us")

	type templateStruct struct {
		Timestamp time.Time
		Language  string
		Phrases   []Phrase
	}

	log.Println("Generating golang files with phrases struct")

	packageTemplate.Execute(fileDataBR, templateStruct{
		Timestamp: time.Now(),
		Language:  "PhrasesBR",
		Phrases:   phrasesBR,
	})

	packageTemplate.Execute(fileDataUS, templateStruct{
		Timestamp: time.Now(),
		Language:  "PhrasesUS",
		Phrases:   phrasesUS,
	})
}

func ReadPhrasesFromDirectory(path string) []Phrase {
	entries, err := os.ReadDir(path)
	if err != nil {
		log.Fatal(err)
	}

	phrases := []Phrase{}

	for _, file := range entries {
		content, err := os.ReadFile(filepath.Join(path, file.Name()))
		die(err)

		p := []Phrase{}
		json.Unmarshal(content, &p)
		die(err)

		phrases = append(phrases, p...)
	}

	return phrases
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
package data

var {{ .Language }} = []Phrase{
{{- range .Phrases }}
	{
		Phrase: "{{ .Quote }}",
		Author: "{{ .Author }}",
	},
{{- end }}
}
`))

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}
